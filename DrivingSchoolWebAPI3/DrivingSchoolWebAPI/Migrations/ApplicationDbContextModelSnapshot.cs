// <auto-generated />
using System;
using DrivingSchoolAPIModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrivingSchoolWebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DrivingSchoolAPIModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePictureBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "806b750e-093f-49c3-af63-23fe79b0877d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6333b999-eb3f-43d6-bb79-39cf491489d7",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Morales",
                            LastName = "Angela",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDOjG137oMT7pGk3n/NuZwYFYc/fzhdQ5aTmT9EQIMh3A19iNKOBidh9PZSAr+c3EQ==",
                            Patronymic = "Chambers",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f781366-7010-469d-bb4b-5c0e6b7133c1",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "b4d9d5ad-6365-46ab-9b1d-b572640dcada",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fd0e681-9dea-4692-8fa9-9f0675fc8005",
                            Email = "Instructor0@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mattie",
                            LastName = "Jeremy",
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR0@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR0@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENuxV3b+BFM/E4r8ndSbmzgkGnCh7Yf7GWVjj8h8MnspLLxcQH0+v9DSnOysf+WTgQ==",
                            Patronymic = "Jeremy",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9024030f-2192-4f98-99cb-af55a7a503bb",
                            TwoFactorEnabled = false,
                            UserName = "Instructor0@example.com"
                        },
                        new
                        {
                            Id = "f04a501b-78f0-43b3-a00c-dabe9039df55",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ee3091c-2f98-49e1-9ba2-0eb509ad3b6f",
                            Email = "Instructor1@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mattie",
                            LastName = "Timothy",
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR1@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKsRSiZ7CinmGLYpRU91oxBK7bIuTasO2d9YRfBpZvmW1ry0mNPrkAMnRsbLFAipDg==",
                            Patronymic = "Amy",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48ef1693-a5ae-4e4d-89ec-9b7cac575d20",
                            TwoFactorEnabled = false,
                            UserName = "Instructor1@example.com"
                        },
                        new
                        {
                            Id = "b6f86a9f-fc58-4aea-a223-085c61a919b9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f14bdaa-e6ef-46d7-8638-87bdd2251755",
                            Email = "Instructor2@example.com",
                            EmailConfirmed = false,
                            FirstName = "Rodriguez",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR2@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHFkpGeXa9ORnl4yub5P07L8sXlBBgnmI38UxyCMCAvlmzrX8BE8Z7N2llbVcXg3/g==",
                            Patronymic = "Washington",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4bbdd35b-0a75-4816-8cc8-8938404821e7",
                            TwoFactorEnabled = false,
                            UserName = "Instructor2@example.com"
                        },
                        new
                        {
                            Id = "37407b70-3493-426c-8a81-948f2f0c33f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "908f213e-675e-47f6-bf3c-eebc956413c6",
                            Email = "Instructor3@example.com",
                            EmailConfirmed = false,
                            FirstName = "Rodriguez",
                            LastName = "Crawford",
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR3@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEvqjA9eKAMtpUwtJDK7jlSih41WvyWM3VhP76HbZciabu7c13fTeagWXl6IE2RCug==",
                            Patronymic = "Williams",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9d9fbe1-e0c1-4cd7-a47b-e55e59a3119f",
                            TwoFactorEnabled = false,
                            UserName = "Instructor3@example.com"
                        },
                        new
                        {
                            Id = "ce2e457d-d9df-4b14-8234-811080578b7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0131ba0-0f5e-46bd-bf63-08bda95cb1ac",
                            Email = "Instructor4@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sara",
                            LastName = "Jeremy",
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR4@EXAMPLE.COM",
                            NormalizedUserName = "INSTRUCTOR4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENcNfEJbg9hED04gPsXsHmPY1/dCYy5UsZtEXSHkK6ZIpJLEW21CBDuonODVihSdKA==",
                            Patronymic = "Eleanor",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a5b5185-b499-4280-94cc-9997db78e56b",
                            TwoFactorEnabled = false,
                            UserName = "Instructor4@example.com"
                        },
                        new
                        {
                            Id = "39b3c16e-dfa9-4d00-b09f-a91b8f5b14e0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59faeda6-1b7c-4d61-981f-3f055d0cc414",
                            Email = "Student0@example.com",
                            EmailConfirmed = false,
                            FirstName = "Eleanor",
                            LastName = "Brooks",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT0@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT0@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJC9++4wgSUaJsHxSBSBcWaqQpl09iNjIFFMPmXDjcqqoUU++vVNHP4iUNIM98ajJw==",
                            Patronymic = "Timothy",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c40611d-932c-4185-bcc7-802df343903a",
                            TwoFactorEnabled = false,
                            UserName = "Student0@example.com"
                        },
                        new
                        {
                            Id = "fd488461-92e4-4cff-80da-f2da167b829b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42eefae5-3700-4252-9f87-c6ea1ebf3294",
                            Email = "Student1@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mattie",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT1@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBj4+RfLe9wGysmKGi+oQ8c/U1VgLReJmDrVa9+qtPsn/SGs9Ciy/ocJvL9IkgLGdA==",
                            Patronymic = "Nelson",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3059945-3855-406d-bbcc-8d20bd630393",
                            TwoFactorEnabled = false,
                            UserName = "Student1@example.com"
                        },
                        new
                        {
                            Id = "a85de3dd-97b0-4f6c-9a04-ef782e943242",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9688bdd8-824a-4463-b90f-658ea32ba8ab",
                            Email = "Student2@example.com",
                            EmailConfirmed = false,
                            FirstName = "Morgan",
                            LastName = "Charlotte",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB/H8bp6EXLLAZYqC8konf6ulyXmYqKCR1u7G5H7k4VXCh/aYR410NQIn/cWvyNlvA==",
                            Patronymic = "Morgan",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "942f2a0a-039c-4b6b-8fe8-515a837c81eb",
                            TwoFactorEnabled = false,
                            UserName = "Student2@example.com"
                        },
                        new
                        {
                            Id = "fd6c2aa5-52a0-47af-868f-008ca6cabd9f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd923892-2569-44f4-b107-6e5cde676f02",
                            Email = "Student3@example.com",
                            EmailConfirmed = false,
                            FirstName = "Morgan",
                            LastName = "Vivian",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT3@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECUcETSKibs5v/R9o9bNmJiOa0+n9uW7KF7Te2ML28SoQcsfKGVZHzABFLf4K2k/Jg==",
                            Patronymic = "Sara",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "369e7e9e-2332-4e1d-8ac0-796bb330e441",
                            TwoFactorEnabled = false,
                            UserName = "Student3@example.com"
                        },
                        new
                        {
                            Id = "950fe809-938c-41df-9a77-1b2d5afabb04",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62387a17-b61f-4a9e-811a-a799d7f8d81a",
                            Email = "Student4@example.com",
                            EmailConfirmed = false,
                            FirstName = "Elaine",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT4@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHm9T1R4y5z76XzyFz54x0JqRS5awGEJ/1D9BKjnAoQkJsyIc/9ezo5P2u4TXPsQFg==",
                            Patronymic = "Mattie",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0bc52d8-dfb4-4950-bdce-ef80126f667a",
                            TwoFactorEnabled = false,
                            UserName = "Student4@example.com"
                        });
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("InnerScheduleOfInstructorId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("InnerScheduleOfInstructorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.GradeByInstructorToStudent", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.HasKey("ClassId");

                    b.ToTable("GradesByInstructorToStudent");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.GradeByStudentToInstructor", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.HasKey("ClassId");

                    b.ToTable("GradesByStudentToInstructor");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.InnerScheduleOfInstructor", b =>
                {
                    b.Property<int>("InnerScheduleOfInstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InnerScheduleOfInstructorId"));

                    b.Property<DateOnly>("DayOfWork")
                        .HasColumnType("date");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int?>("OuterScheduleId")
                        .HasColumnType("int");

                    b.HasKey("InnerScheduleOfInstructorId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("OuterScheduleId");

                    b.ToTable("InnerSchedulesOfInstructors");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InstructorId");

                    b.HasIndex("UserId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            InstructorId = 1,
                            UserId = "b4d9d5ad-6365-46ab-9b1d-b572640dcada"
                        },
                        new
                        {
                            InstructorId = 2,
                            UserId = "f04a501b-78f0-43b3-a00c-dabe9039df55"
                        },
                        new
                        {
                            InstructorId = 3,
                            UserId = "b6f86a9f-fc58-4aea-a223-085c61a919b9"
                        },
                        new
                        {
                            InstructorId = 4,
                            UserId = "37407b70-3493-426c-8a81-948f2f0c33f7"
                        },
                        new
                        {
                            InstructorId = 5,
                            UserId = "ce2e457d-d9df-4b14-8234-811080578b7e"
                        });
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.OuterScheduleOfInstructor", b =>
                {
                    b.Property<int>("OuterScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OuterScheduleId"));

                    b.Property<string>("ClassesRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatesOfClassesRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeClassExampleRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleSheetId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleSheetPageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("NotFreeClassExampleRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimesOfClassesRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OuterScheduleId");

                    b.HasIndex("InstructorId");

                    b.ToTable("OuterSchedulesOfInstructors");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            UserId = "39b3c16e-dfa9-4d00-b09f-a91b8f5b14e0"
                        },
                        new
                        {
                            StudentId = 2,
                            UserId = "fd488461-92e4-4cff-80da-f2da167b829b"
                        },
                        new
                        {
                            StudentId = 3,
                            UserId = "a85de3dd-97b0-4f6c-9a04-ef782e943242"
                        },
                        new
                        {
                            StudentId = 4,
                            UserId = "fd6c2aa5-52a0-47af-868f-008ca6cabd9f"
                        },
                        new
                        {
                            StudentId = 5,
                            UserId = "950fe809-938c-41df-9a77-1b2d5afabb04"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f7a9e00d-7b9b-4af9-9028-7f6cb55503e4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "cbd20502-86dd-40f3-b3fa-7cc68d0bd8ac",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "28bd263f-58f2-4bad-a517-4e79408a1970",
                            Name = "Instructor",
                            NormalizedName = "INSTRUCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "806b750e-093f-49c3-af63-23fe79b0877d",
                            RoleId = "f7a9e00d-7b9b-4af9-9028-7f6cb55503e4"
                        },
                        new
                        {
                            UserId = "b4d9d5ad-6365-46ab-9b1d-b572640dcada",
                            RoleId = "28bd263f-58f2-4bad-a517-4e79408a1970"
                        },
                        new
                        {
                            UserId = "f04a501b-78f0-43b3-a00c-dabe9039df55",
                            RoleId = "28bd263f-58f2-4bad-a517-4e79408a1970"
                        },
                        new
                        {
                            UserId = "b6f86a9f-fc58-4aea-a223-085c61a919b9",
                            RoleId = "28bd263f-58f2-4bad-a517-4e79408a1970"
                        },
                        new
                        {
                            UserId = "37407b70-3493-426c-8a81-948f2f0c33f7",
                            RoleId = "28bd263f-58f2-4bad-a517-4e79408a1970"
                        },
                        new
                        {
                            UserId = "ce2e457d-d9df-4b14-8234-811080578b7e",
                            RoleId = "28bd263f-58f2-4bad-a517-4e79408a1970"
                        },
                        new
                        {
                            UserId = "39b3c16e-dfa9-4d00-b09f-a91b8f5b14e0",
                            RoleId = "cbd20502-86dd-40f3-b3fa-7cc68d0bd8ac"
                        },
                        new
                        {
                            UserId = "fd488461-92e4-4cff-80da-f2da167b829b",
                            RoleId = "cbd20502-86dd-40f3-b3fa-7cc68d0bd8ac"
                        },
                        new
                        {
                            UserId = "a85de3dd-97b0-4f6c-9a04-ef782e943242",
                            RoleId = "cbd20502-86dd-40f3-b3fa-7cc68d0bd8ac"
                        },
                        new
                        {
                            UserId = "fd6c2aa5-52a0-47af-868f-008ca6cabd9f",
                            RoleId = "cbd20502-86dd-40f3-b3fa-7cc68d0bd8ac"
                        },
                        new
                        {
                            UserId = "950fe809-938c-41df-9a77-1b2d5afabb04",
                            RoleId = "cbd20502-86dd-40f3-b3fa-7cc68d0bd8ac"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Class", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.InnerScheduleOfInstructor", "InnerScheduleOfInstructor")
                        .WithMany()
                        .HasForeignKey("InnerScheduleOfInstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPIModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("InnerScheduleOfInstructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.GradeByInstructorToStudent", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.GradeByStudentToInstructor", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.InnerScheduleOfInstructor", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPIModels.OuterScheduleOfInstructor", "OuterScheduleOfInstructor")
                        .WithMany()
                        .HasForeignKey("OuterScheduleId");

                    b.Navigation("Instructor");

                    b.Navigation("OuterScheduleOfInstructor");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Instructor", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.OuterScheduleOfInstructor", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("DrivingSchoolAPIModels.Student", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DrivingSchoolAPIModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
